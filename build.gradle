apply plugin: 'java'

group 'org.hl'
version '1.0'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenLocal()
    mavenCentral()
}

buildscript{
    repositories{
        mavenCentral()
    }
    dependencies{
        classpath 'net.sf.proguard:proguard-gradle:6.0.3'
    }
}



dependencies {
    compile 'cn.edu.hfut.dmic.webcollector:WebCollector:2.73-alpha'
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    //compile('org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE')

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// jar打包成可执行JAR
def mainClassName = "webcrab.gui.fx.FxApp"
jar {
    String libfiles = ''
    configurations.runtime.each {libfiles = libfiles + " dependlib/"+it.name}
    manifest {
        attributes "Main-Class": "$mainClassName"
        attributes "Class-Path": libfiles
    }

// 将依赖包打入jar中
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }

    // 排除重复的文件，防止对proguard造成困扰
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude('META-INF/maven/**')
}

/**
 * 递归删除文件夹中文件，最后删除文件夹
 */
void deleteFiles(String path){
    File f = file(path)
    if(f.exists()){
        if(f.isDirectory()){//如果是文件夹
            File[] fileList = f.listFiles() //获取文件夹中所有子级文件/夹
            for (File file2 : fileList) {
                if(file2.isDirectory()){
                    deleteFiles(file2.getPath())
                }else{
                    file2.delete()
                }
            }
        }
    }
    f.delete()
}

task releaseClean(type: Delete) {
    def releaseDir = "dist"
    deleteFiles releaseDir
}

// 将依赖的jar包导出，供proguard参考
task releaseCopyDependLibs(type: Copy) {
    from configurations.runtime into "dist/dependlib"
}
releaseCopyDependLibs.mustRunAfter(releaseClean)

// 拷贝原jar
task releaseCopyOriginJar(type: Copy) {
    def originJarFile = "build/libs/"+jar.archiveName
    from originJarFile into "dist"
}
releaseCopyOriginJar.mustRunAfter(releaseClean)

// 拷贝conf
task releaseCopyConf(type: Copy) {
    from "conf" into "dist/conf"
}
releaseCopyConf.mustRunAfter(releaseClean)

// 代码混淆
task releaseProguard(type: proguard.gradle.ProGuardTask, dependsOn: [jar, releaseClean, releaseCopyDependLibs]) {
    ext{
        injar = jar.archivePath
        outJar= "dist/myapp-proguard.jar"
    }

    // Specify the input jars, output jars, and library jars.
    injars  injar
    outjars outJar
    configuration 'proguard.cfg'
}

task releaseAll(dependsOn: [releaseProguard, releaseCopyConf, releaseCopyOriginJar]) {

}